"""analysis result hash value

Revision ID: 17f1aea50d07
Revises: 1893d330da4c
Create Date: 2024-11-24 15:28:04.104676

"""
from typing import Sequence, Union

from alembic import op
from sqlalchemy.orm import Session

import hashlib
import sqlalchemy as sa

from internal.dao.analysis_result import AnalysisResult

# revision identifiers, used by Alembic.
revision: str = '17f1aea50d07'
down_revision: Union[str, None] = '2989694a2176'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1. Add a nullable hash_value column
    op.add_column('analysis_result', sa.Column('hash_value', sa.String(length=64), nullable=True))

    # 2. Populate the hash_value column
    bind = op.get_bind()  # Get the database connection
    session = Session(bind=bind)  # Create a SQLAlchemy ORM Session

    try:
        seen_hashes = set()
        # Iterate over existing data and update hash_value
        results = session.query(AnalysisResult).all()
        for row in results:
            unique_string = f"{row.model_name}{row.temperature}{row.top_k}{row.top_p}{row.prompt}"
            new_hash = row.hash_value = hashlib.sha256(unique_string.encode()).hexdigest()

            # Handle duplicate hash values already in the database
            counter = 0
            while new_hash in seen_hashes:
                counter += 1
                unique_string += f"resolve_collision_{counter}"
                new_hash = hashlib.sha256(unique_string.encode()).hexdigest()

            row.hash_value = new_hash
            seen_hashes.add(new_hash)

        session.commit()  # Commit the updates
    except Exception as e:
        session.rollback()
        raise e
    finally:
        session.close()

    with op.batch_alter_table("analysis_result", schema=None) as batch_op:
        # 3. Set the hash_value column to NOT NULL
        batch_op.alter_column("hash_value", nullable=False)
        # 4. Add a unique constraint
        batch_op.create_unique_constraint("uq_analysis_result_hash_value", ["hash_value"])

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("analysis_result", schema=None) as batch_op:
        batch_op.drop_constraint("uq_analysis_result_hash_value", type_="unique")
        batch_op.drop_column("hash_value")
    # ### end Alembic commands ###
